#!/bin/bash
# --------------------------------------------------------------------------
# This script installs files and services specific to this project.
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/pi-e-ink-daily
#
# --------------------------------------------------------------------------

# Pin to signal power-off. Default is 26 if no argument given

GPIO_POWEROFF="${1:-26}"
PACKAGES="python3-pil python3-numpy python3-rpi.gpio python3-spidev python3-pip python3-tz python3-tzlocal libxslt1.1 fonts-dejavu"
PACKAGES_PIP="smbus2 inky caldav"
PROJECT="pi-e-ink-daily"

# --- basic packages   ------------------------------------------------------

check_packages() {
  local p
  for p in "$@"; do
    echo -en "Checking $p ... " >&2
    dpkg -s "$p" 2>/dev/null | grep -q "Status.*ok" || return 0
    echo "ok" >&2
  done
  return 1
}

get_new_packages() {
  local p packages
  for p in "$@"; do
    echo -en "Checking $p ... " >&2
    if dpkg -s "$p" 2>/dev/null | grep -q "Status.*ok"; then
      echo "ok" >&2
    else
      echo "not installed" >&2
      packages+=" $p"
    fi
  done
  echo "$packages"
}

install_packages() {
  new_packages=$(get_new_packages $PACKAGES)
  if [ -n "$new_packages" ]; then
    echo -e "[INFO] installing additional packages" 2>&1
    apt-get update
    apt-get -y --no-upgrade install $new_packages
  fi

  # install PIP3 packages
  [ -n "$PACKAGES_PIP" ] && pip3 --disable-pip-version-check install $PACKAGES_PIP
}

# --- install specific files   ----------------------------------------------

install_files() {
  echo -e "[INFO] installing project files" 2>&1

  for f in `find $(dirname "$0")/../files/ -type f -not -name "*.pyc"`; do
    target="${f#*files}"
    target_dir="${target%/*}"
    [ ! -d "$target_dir" ] && mkdir -p "$target_dir"
    cp "$f" "$target"
    chown root:root "$target"
  done
  chmod 755 /usr/local/bin/daily_agenda.py

  # create configuration file
  if [ ! -f "/etc/${PROJECT}.json" ]; then
    cp -a "/etc/${PROJECT}.defaults.json" "/etc/${PROJECT}.json"
    echo -e "[INFO] created configuration file: /etc/${PROJECT}.json" 2>&1
  fi
}

# --- configure system   ----------------------------------------------------

configure_system() {
  # update /boot/config.txt
  if ! grep -q "^dtparam=spi=on" /boot/config.txt ; then
    echo -e "[INFO] configuring spi in /boot/config.txt" 2>&1
    echo "dtparam=spi=on" >> /boot/config.txt
  fi
  if ! grep -q "^dtparam=i2c_arm=on" /boot/config.txt ; then
    echo -e "[INFO] configuring i2c in /boot/config.txt" 2>&1
    echo "dtparam=i2c_arm=on" >> /boot/config.txt
  fi
  if ! grep -q "^gpio=23" /boot/config.txt ; then
    echo -e "[INFO] configuring GPIO23 as output (drive-high) in /boot/config.txt" 2>&1
    echo -e "#external LED\ngpio=23=op,dh" >> /boot/config.txt
  fi
  if ! grep -q "^gpio=24" /boot/config.txt ; then
    echo -e "[INFO] configuring GPIO24 as input with pullup in /boot/config.txt" 2>&1
    echo -e "#admin-mode\ngpio=24=ip,pu" >> /boot/config.txt
  fi
  if ! grep -q "^dtoverlay=gpio-poweroff" /boot/config.txt ; then
    echo -e "[INFO] configuring gpio-poweroff for GPIO$GPIO_POWEROFF in /boot/config.txt" 2>&1
    echo "dtoverlay=gpio-poweroff,gpiopin=$GPIO_POWEROFF" >> /boot/config.txt
  fi
  if ! grep -q "^dtoverlay=gpio-shutdown" /boot/config.txt ; then
    echo -e "[INFO] configuring gpio-shutdown for GPIO6 in /boot/config.txt" 2>&1
    echo "dtoverlay=gpio-shutdown,gpio_pin=6" >> /boot/config.txt
  fi
  if ! grep -q "^dtoverlay=i2c-rtc,ds3231" /boot/config.txt ; then
    echo -e "[INFO] configuring RTC in /boot/config.txt" 2>&1
    echo "dtoverlay=i2c-rtc,ds3231,wakeup-source" >> /boot/config.txt
  fi

  # update /etc/modules
  if ! grep -q "^i2c-dev" /etc/modules; then
    echo -e "[INFO] configuring /etc/modules" 2>&1
    echo "i2c-dev" >> /etc/modules
  fi
}

# --- activate service   ----------------------------------------------------

enable_services() {
  echo -e "[INFO] enabeling $PROJECT.service" 2>&1
  systemctl enable "$PROJECT.service"
}

# --- main program   --------------------------------------------------------

install_packages

install_files
configure_system
enable_services

echo -e "[INFO] installation completed" 2>&1
echo -e "[INFO] please reboot your system" 2>&1
